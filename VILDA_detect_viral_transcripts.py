import os
import subprocess
import argparse

def run_command(command):
    """Run a shell command and print it."""
    print(f"Running command: {command}")
    subprocess.run(command, shell=True, check=True)

def align_reads_with_star(reference_dir, sample_name, fastq_files, output_dir, threads):
    """Align RNA-seq data with STAR."""
    os.makedirs(output_dir, exist_ok=True)
    if len(fastq_files) == 2:
        if fastq_files[0].endswith(".gz") and fastq_files[1].endswith(".gz"):
            read_files_command = "--readFilesCommand zcat"
        else:
            read_files_command = ""
        
        command = (
            f"STAR --runThreadN {threads} --runMode alignReads {read_files_command} "
            f"--quantMode TranscriptomeSAM GeneCounts --twopassMode Basic --outReadsUnmapped Fastx "
            f"--genomeDir {os.path.join(reference_dir, 'GRCh38')} --readFilesIn {fastq_files[0]} {fastq_files[1]} "
            f"--outFileNamePrefix {output_dir}/{sample_name}"
        )
    elif len(fastq_files) == 1:
        command = (
            f"STAR --runThreadN {threads} --runMode alignReads "
            f"--quantMode TranscriptomeSAM GeneCounts --twopassMode Basic --outReadsUnmapped Fastx "
            f"--genomeDir {os.path.join(reference_dir, 'GRCh38')} --readFilesIn {fastq_files[0]} "
            f"--outFileNamePrefix {output_dir}/{sample_name}"
        )
    else:
        raise ValueError("Invalid number of FASTQ files provided.")
    
    run_command(command)

def rename_unmapped_reads(output_dir, sample_name, paired_end=True):
    """Rename the unmapped reads files generated by STAR."""
    unmapped_fastq = f"{output_dir}/{sample_name}Unmapped.out.mate"
    if paired_end:
        unmapped_fastq1 = f"{unmapped_fastq}1"
        unmapped_fastq2 = f"{unmapped_fastq}2"
        os.rename(unmapped_fastq1, f"{unmapped_fastq1}.fastq")
        os.rename(unmapped_fastq2, f"{unmapped_fastq2}.fastq")
    else:
        os.rename(unmapped_fastq, f"{unmapped_fastq}.fastq")

def align_with_minimap2(minimap2_index_path, unmapped_fastq1, unmapped_fastq2, output_sam_path):
    """Align unmapped reads with Minimap2."""
    command = f"minimap2 -a {minimap2_index_path} {unmapped_fastq1} {unmapped_fastq2} > {output_sam_path}"
    run_command(command)

def count_reads(sam_file, gtf_file, output_count_file):
    """Count reads mapped to the viral genome using HTSeq."""
    command = f"htseq-count -f sam -r pos -s no -t exon -i gene_id {sam_file} {gtf_file} > {output_count_file}"
    run_command(command)

def main(reference_dir, sample_name, fastq_files, output_dir, threads):
    """Main function to execute the entire pipeline."""
    align_reads_with_star(reference_dir, sample_name, fastq_files, output_dir, threads)
    rename_unmapped_reads(output_dir, sample_name, paired_end=(len(fastq_files) == 2))
    unmapped_fastq = f"{output_dir}/{sample_name}Unmapped.out.mate"
    output_sam_path = f"{output_dir}/{sample_name}_viral.sam"
    minimap2_index_path = f"{reference_dir}/VILDA.mmi"
    if len(fastq_files) == 2:
        unmapped_fastq1 = f"{unmapped_fastq}1.fastq"
        unmapped_fastq2 = f"{unmapped_fastq}2.fastq"
    elif len(fastq_files) == 1:
        unmapped_fastq1 = f"{unmapped_fastq}.fastq"
        unmapped_fastq2 = ""
    align_with_minimap2(minimap2_index_path, unmapped_fastq1, unmapped_fastq2, output_sam_path)
    viral_gtf_path = f"{reference_dir}/VILDA.gtf"
    output_count_file = f"{output_dir}/{sample_name}_viral_counts.txt"
    count_reads(output_sam_path, viral_gtf_path, output_count_file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Detect viral transcripts in RNA-Seq data.")
    parser.add_argument("--reference_dir", required=True, help="Directory containing reference files.")
    parser.add_argument("--sample_name", required=True, help="Name of the sample.")
    parser.add_argument("--fastq", nargs='+', required=True, help="Path(s) to the FASTQ file(s).")
    parser.add_argument("--output_dir", required=True, help="Output directory.")
    parser.add_argument("--threads", type=int, default=32, help="Number of threads to use for alignment.")
    
    args = parser.parse_args()
    main(args.reference_dir, args.sample_name, args.fastq, args.output_dir, args.threads)
